// if (!pthread_mutex_lock(&philo->forks[k]))
// 			printf("philo %d take the left fork\n", k);
// 		right = (k + philo->number_of_philosopher - 1) % philo->number_of_philosopher;
// 		if (!pthread_mutex_lock(&philo->forks[right]))
// 			printf("philo %d take the right fork\n", k);
// 		if (philo->state_philo[k] == HUNGER && philo->state_philo[right] != EATING)
// 		{
// 			philo->state_philo[k] = EATING;
// 			printf("philo %d start eating\n", k);
// 			usleep(philo->time_to_eat * 1000);
// 			printf("philo %d put the right fork\n", k);
// 			pthread_mutex_unlock(&philo->forks[right]);
// 			printf("philo %d put the left fork\n", k);
// 			philo->state_philo[k] = SLEEP;
// 		}
// 		if (philo->state_philo[k] == SLEEP)
// 		{
// 			pthread_mutex_unlock(&philo->forks[k]);
// 			printf("philo %d is sleeping\n", k);
// 			usleep(philo->time_to_sleep * 1000);
// 			philo->state_philo[k] = HUNGER;
// 		}
// 		// printf("philo %d take the left fork\n", k);
// 		// pthread_mutex_unlock(&philo->forks[right]);
// 		// printf("philo %d put the left fork\n", k);
// 		// pthread_mutex_unlock(&philo->forks[k]);
// 		// pthread_mutex_lock(&mutex);
// 		pthread_mutex_unlock(&philo->forks[k]);
// 		k++;
// 		// pthread_mutex_unlock(&mutex);
// 		j = 0;
// 		if (k >= philo->number_of_philosopher)
// 			k = 0;
// 		puts("==========================================");